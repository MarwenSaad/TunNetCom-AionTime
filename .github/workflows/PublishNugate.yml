# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace }}/nuget

defaults:
  run:
    shell: bash

jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Set Project Name
      run: echo "PROJECT_NAME=AzureDevopsWebhookService.Contracts" >> $GITHUB_ENV

    - name: Find project path
      id: find-path
      run: |
        # Search for the specific project file by name
        PROJECT_PATH=$(find . -name "${{ env.PROJECT_NAME }}.csproj")
        echo "Project path found: $PROJECT_PATH"
        
        # Save the project path as an environment variable
        echo "project_path=$PROJECT_PATH" >> $GITHUB_ENV

    - name: Set NuGet directory
      run: echo "NuGetDirectory=$HOME/.nuget/packages" >> $GITHUB_ENV

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name: Pack project
      run: dotnet pack ${{ env.project_path }} --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  validate_nuget:
    runs-on: ubuntu-latest
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Manually install the tool if it cannot be found
      - name: Install nuget validator
        run: dotnet tool install TunetCom.NuGetPackageValidation.Tool --global --version <VERSION_NUMBER>

      # Validate metadata and content of the NuGet package
      - name: Validate package
        run: meziantou.validate-nuget-package $(find ${{ env.NuGetDirectory }} -name "*.nupkg")

  run_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
    - name: Run tests
      run: dotnet test ${{ env.NuGetDirectory }} --configuration Release

  deploy:
    # Publish only when creating a GitHub Release
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: [ validate_nuget, run_test ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      - name: Publish NuGet package
        run: |
          for file in ${{ env.NuGetDirectory }}/*.nupkg; do
            dotnet nuget push "$file" --api-key "${{ secrets.NUGET_SECRET_KEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          done
